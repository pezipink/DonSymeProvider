<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.Data</name></assembly>
<members>
<member name="T:AssemblyInfo">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Csv.CsvFile.Parse(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Char},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Parses the specified CSV content
</summary>
</member>
<member name="M:FSharp.Data.Csv.CsvFile.Load(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Char},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Loads CSV from the specified uri
</summary>
</member>
<member name="M:FSharp.Data.Csv.CsvFile.Load(System.IO.TextReader,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Char},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Loads CSV from the specified reader
</summary>
</member>
<member name="M:FSharp.Data.Csv.CsvFile.Load(System.IO.Stream,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Char},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Loads CSV from the specified stream
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Csv.CsvFile">
<summary>
 Represents a CSV file. The lines are read on demand from &apos;reader&apos;.
 Columns are delimited by one of the chars passed by &apos;separators&apos; (defaults to just &apos;,&apos;), and
 to escape the separator chars, the &apos;quote&apos; character will be used (defaults to &apos;&quot;&apos;).
 If &apos;hasHeaders&apos; is true (the default), the first line read by &apos;reader&apos; will not be considered part of data.
 If &apos;ignoreErrors&apos; is true (the default is false), rows with a different number of columns from the header row
 (or the first row if headers are not present) will be ignored
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Csv.Extensions">
<summary>
 Adds extension methods that can be used to work with CsvRow in a more convenient, but
 less safe way. The module also provides the dynamic operator.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Json.JsonValue.Parse(System.String,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Parses the specified JSON string
</summary>
</member>
<member name="M:FSharp.Data.Json.JsonValue.Load(System.String,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Loads JSON from the specified uri
</summary>
</member>
<member name="M:FSharp.Data.Json.JsonValue.Load(System.IO.TextReader,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Loads JSON from the specified reader
</summary>
</member>
<member name="M:FSharp.Data.Json.JsonValue.Load(System.IO.Stream,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Loads JSON from the specified stream
</summary>
</member>
<member name="T:FSharp.Data.Json.JsonValue">
<summary>
 Represents a JSON value. Large numbers that do not fit in the 
 Decimal type are represented using the Float case, while
 smaller numbers are represented as decimals to avoid precision loss.
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.op_Dynamic(FSharp.Data.Json.JsonValue,System.String)">
<summary>
 Get property of a JSON object (assuming that the value is an object)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.GetProperty(FSharp.Data.Json.JsonValue,System.String)">
<summary>
 Get property of a JSON object. Fails if the value is not an object
 or if the property is not present
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.TryGetProperty(FSharp.Data.Json.JsonValue,System.String)">
<summary>
 Try get property of a JSON object. Returns None if the value is not
 an object or if the property is not present.
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.get_Properties(FSharp.Data.Json.JsonValue)">
<summary>
 Get a sequence of key-value pairs representing the properties of an object
 (assuming that the value is an object)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.get_InnerText(FSharp.Data.Json.JsonValue)">
<summary>
 Get inner text of an element - this includes just string nodes and
 string nodes in an array (e.g. multi-line string represented as array)
 (assuming that the value is a string or array of strings)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsGuid``1(FSharp.Data.Json.JsonValue,Microsoft.FSharp.Core.FSharpOption{``0})">
<summary>
 Get the guid value of an element (assuming that the value is a guid)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsBoolean(FSharp.Data.Json.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get the boolean value of an element (assuming that the value is a boolean)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsInteger64(FSharp.Data.Json.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get a number as a 64-bit integer (assuming that the value fits in 64-bit integer)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsInteger(FSharp.Data.Json.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get a number as an integer (assuming that the value fits in integer)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsDecimal(FSharp.Data.Json.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get a number as a decimal (assuming that the value fits in decimal)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsFloat(FSharp.Data.Json.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get a number as a float (assuming that the value is convertible to a float)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsDateTime(FSharp.Data.Json.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get the datetime value of an element (assuming that the value is a string
 containing well-formed ISO date or MSFT JSON date)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsString(FSharp.Data.Json.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get the string value of an element (assuming that the value is a scalar)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.GetEnumerator(FSharp.Data.Json.JsonValue)">
<summary>
 Get all elements of a JSON object (assuming that the value is an array)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.get_Item(FSharp.Data.Json.JsonValue,System.String)">
<summary>
 Assuming the value is an object, get value with the specified name
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.get_Item(FSharp.Data.Json.JsonValue,System.Int32)">
<summary>
 Assuming the value is an array, get the value at a specified index
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsArray(FSharp.Data.Json.JsonValue)">
<summary>
 Get all elements of a JSON object (assuming that the value is an array)
</summary>
</member>
<member name="T:FSharp.Data.Json.Extensions">
<summary>
 Adds extension methods that can be used to work with JsonValue in a less safe, 
 but shorter way. The module also provides the dynamic operator.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.RuntimeImplementation.CsvFile`1.Truncate(System.Int32)">
<summary>
 Returns a csv that when enumerated returns at most N rows.
</summary>
</member>
<member name="M:FSharp.Data.RuntimeImplementation.CsvFile`1.TakeWhile(Microsoft.FSharp.Core.FSharpFunc{`0,System.Boolean})">
<summary>
 Returns a csv that, when iterated, yields rowswhile the given predicate
 returns &lt;c&gt;true&lt;/c&gt;, and then returns no further rows.
</summary>
</member>
<member name="M:FSharp.Data.RuntimeImplementation.CsvFile`1.Take(System.Int32)">
<summary>
 Returns a new csv with only the first N rows of the underlying csv.
</summary>
</member>
<member name="M:FSharp.Data.RuntimeImplementation.CsvFile`1.SkipWhile(Microsoft.FSharp.Core.FSharpFunc{`0,System.Boolean})">
<summary>
 Returns a csv that, when iterated, skips rows while the given predicate returns
 &lt;c&gt;true&lt;/c&gt;, and then yields the remaining rows.
</summary>
</member>
<member name="M:FSharp.Data.RuntimeImplementation.CsvFile`1.Skip(System.Int32)">
<summary>
 Returns a csv that skips N rows and then yields the remaining rows.
</summary>
</member>
<member name="M:FSharp.Data.RuntimeImplementation.CsvFile`1.SaveToString(Microsoft.FSharp.Core.FSharpOption{System.Char},Microsoft.FSharp.Core.FSharpOption{System.Char})">
<summary>
 Saves CSV to a string
</summary>
</member>
<member name="M:FSharp.Data.RuntimeImplementation.CsvFile`1.Save(System.IO.Stream,Microsoft.FSharp.Core.FSharpOption{System.Char},Microsoft.FSharp.Core.FSharpOption{System.Char})">
<summary>
 Saves CSV to the specified stream
</summary>
</member>
<member name="M:FSharp.Data.RuntimeImplementation.CsvFile`1.Save(System.IO.TextWriter,Microsoft.FSharp.Core.FSharpOption{System.Char},Microsoft.FSharp.Core.FSharpOption{System.Char})">
<summary>
 Saves CSV to the specified writer
</summary>
</member>
<member name="M:FSharp.Data.RuntimeImplementation.CsvFile`1.Filter(Microsoft.FSharp.Core.FSharpFunc{`0,System.Boolean})">
<summary>
 Returns a new csv containing only the rows for which the given predicate returns &quot;true&quot;.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.RuntimeImplementation.CsvFile`1.Cache">
<summary>
 Returns a new csv with the same rows as the original but which guarantees
 that each row will be only be read and parsed from the input at most once.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.RuntimeImplementation.Operations.OptionToNullable``1(Microsoft.FSharp.Core.FSharpOption{``0})">
<summary>
 Turn an F# option type Option&lt;&apos;T&gt; containing a primitive 
 value type into a .NET type Nullable&lt;&apos;T&gt;
</summary>
</member>
<member name="M:FSharp.Data.RuntimeImplementation.Operations.NullableToOption``1(System.Nullable{``0})">
<summary>
 Turn a .NET type Nullable&lt;&apos;T&gt; to an F# option type Option&lt;&apos;T&gt;
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Data.RuntimeImplementation.Operations.GetNonOptionalValue``1(System.String,Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Operation that extracts the value from an option and reports a
 meaningful error message when the value is not there

 We could just return defaultof&lt;&apos;T&gt; if the value is None, but that is not
 really correct, because this operation is used when the inference engine
 inferred that the value is always present. The user should update their
 sample to infer it as optional (and get None). If we use defaultof&lt;&apos;T&gt; we
 might return 0 and the user would not be able to distinguish between 0
 and missing value.
</summary>
</member>
<member name="M:FSharp.Data.RuntimeImplementation.Operations.GetCulture(System.String)">
<summary>
 Returns CultureInfo matching the specified culture string
 (or InvariantCulture if the argument is null or empty)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.RuntimeImplementation.Operations.AsOption(System.String)">
<summary>
 Turns empty or null string value into None, otherwise returns Some
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.RuntimeImplementation.Operations.AsDateTime(System.IFormatProvider,System.String)">
<summary>
 Parse date time using either the JSON milliseconds format or using ISO 8601
 that is, either &quot;\/Date(&lt;msec-since-1/1/1970&gt;)\/&quot; or something
 along the lines of &quot;2013-01-28T00:37Z&quot;
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.RuntimeImplementation.ReentrantEnumerable`1">
<summary>
 An enumerable that will return elements from the &apos;firstSeq&apos; first time it
 is accessed and then will call &apos;nextSeq&apos; each time for all future GetEnumerator calls
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.RuntimeImplementation.CsvHelpers">

</member>
<member name="M:FSharp.Data.RuntimeImplementation.CsvReader.readCsvFile(System.IO.TextReader,System.String,System.Char)">
<summary>
 Lazily reads the specified CSV file using the specified separators
 (Handles most of the RFC 4180 - most notably quoted values and also
 quoted newline characters in columns)
</summary>
</member>
<member name="T:FSharp.Data.RuntimeImplementation.CsvReader">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.RuntimeImplementation.Helpers.asOption``1(System.Boolean,``0)">
<summary>
 Convert the result of TryParse to option type
</summary>
</member>
<member name="T:FSharp.Data.RuntimeImplementation.Helpers">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.RuntimeImplementation.ProviderFileSystem.readTextAtRunTime(System.Boolean,System.String,System.String,System.String)">
<summary>
 Resolve a location of a file (or a web location) and open it for shared
 read at runtime (do not monitor file changes and use runtime resolution rules)
</summary>
</member>
<member name="M:FSharp.Data.RuntimeImplementation.ProviderFileSystem.asyncOpenStreamInProvider(System.Boolean,System.Boolean,System.String,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}},System.String,System.Uri)">
<summary>
 Given a type provider configuration and a name passed by user, open 
 the uri and return it as a stream
</summary>
</member>
<member name="M:FSharp.Data.RuntimeImplementation.ProviderFileSystem.resolveUri(System.Boolean,System.Boolean,System.String,System.String,System.Uri)">
<summary>
 Resolve the absolute location of a file (or web URL) according to the rules
 used by standard F# type providers as described here:
 https://github.com/fsharp/fsharpx/issues/195#issuecomment-12141785

  * if it is web resource, just return it
  * if it is full path, just return it
  * otherwise..

    At design-time:
      * if the user specified resolution folder, use that
      * use the default resolution folder
    At run-time:
      * if the user specified resolution folder, use that
      * if it is running in F# interactive (config.IsHostedExecution) 
        use the default resolution folder
      * otherwise, use &apos;CurrentDomain.BaseDirectory&apos;

 Returns the resolved file name, together with a flag specifying 
 whether it is web based (and we need WebClient to download it)
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.RuntimeImplementation.ProviderFileSystem">

</member>
<member name="">

</member>
<member name="M:FSharp.Net.Http.RequestDetailed``5(System.String,Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Net.CookieContainer},Microsoft.FSharp.Core.FSharpOption{``4})">
<summary>
 Download an HTTP web resource from the specified URL synchronously
 (allows specifying query string parameters and HTTP headers including
 headers that have to be handled specially - such as Accept, Content-Type &amp; Referer)
 The body for POST request can be specified either as text or as a list of parameters
 that will be encoded, and the method will automatically be set if not specified
</summary>
</member>
<member name="M:FSharp.Net.Http.Request``5(System.String,Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Net.CookieContainer},Microsoft.FSharp.Core.FSharpOption{``4})">
<summary>
 Download an HTTP web resource from the specified URL synchronously
 (allows specifying query string parameters and HTTP headers including
 headers that have to be handled specially - such as Accept, Content-Type &amp; Referer)
 The body for POST request can be specified either as text or as a list of parameters
 that will be encoded, and the method will automatically be set if not specified
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Net.Http.AsyncRequestDetailed``5(System.String,Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Net.CookieContainer},Microsoft.FSharp.Core.FSharpOption{``4})">
<summary>
 Download an HTTP web resource from the specified URL asynchronously
 (allows specifying query string parameters and HTTP headers including
 headers that have to be handled specially - such as Accept, Content-Type &amp; Referer)
 The body for POST request can be specified either as text or as a list of parameters
 that will be encoded, and the method will automatically be set if not specified
</summary>
</member>
<member name="M:FSharp.Net.Http.AsyncRequest``5(System.String,Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Net.CookieContainer},Microsoft.FSharp.Core.FSharpOption{``4})">
<summary>
 Download an HTTP web resource from the specified URL asynchronously
 (allows specifying query string parameters and HTTP headers including
 headers that have to be handled specially - such as Accept, Content-Type &amp; Referer)
 The body for POST request can be specified either as text or as a list of parameters
 that will be encoded, and the method will automatically be set if not specified
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Net.Http">
<summary>
 Utilities for working with network via HTTP. Includes methods for downloading 
 resources with specified headers, query parameters and HTTP body
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:ProviderImplementation.HttpUtility">

</member>
</members>
</doc>
